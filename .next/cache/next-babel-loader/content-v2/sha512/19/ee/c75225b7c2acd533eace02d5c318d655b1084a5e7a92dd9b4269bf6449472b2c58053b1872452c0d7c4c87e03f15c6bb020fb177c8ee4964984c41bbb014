{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { username, psd } from '../../../config';\nimport Link from 'next/link';\nimport { useRouter } from 'next/router';\nimport Meta from '../../../components/Meta';\nimport ReactHtmlParser, { processNodes, convertNodeToElement, htmlparser2 } from 'react-html-parser';\nimport Accordion from '../../../components/Accordion';\nimport Card from '../../../components/Card';\n\nconst reactStringReplace = require('react-string-replace');\n\nconst article = ({\n  article\n}) => {\n  let a = article.result.body;\n  let splitText = a.split(/(#.*#)/gm);\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(\"h1\", {\n      children: article.result.name_of_page\n    }), /*#__PURE__*/_jsx(\"span\", {\n      class: \"usa-tag\",\n      children: article.result.sys_updated_on\n    }), splitText.map(element => {\n      if (element.includes('#%accordion%#')) {\n        return /*#__PURE__*/_jsx(Accordion, {\n          accordion: article.result\n        });\n      } else if (element.includes('##%card%##')) {\n        return /*#__PURE__*/_jsx(Card, {\n          card: article.result\n        });\n      } else {\n        return ReactHtmlParser(element);\n      }\n    }), /*#__PURE__*/_jsx(\"br\", {}), /*#__PURE__*/_jsx(Link, {\n      href: \"/\",\n      children: \"Go Back\"\n    })]\n  });\n};\n\nexport const getStaticProps = async context => {\n  const res = await fetch(`https://dev69061.service-now.com/api/now/table/x_682526_page_bu_0_cwig_page_builder/${context.params.id}`, {\n    method: 'get',\n    headers: {\n      'Authorization': 'Basic ' + btoa(`${username}:${psd}`)\n    }\n  });\n  const article = await res.json();\n  return {\n    props: {\n      article\n    }\n  };\n};\nexport const getStaticPaths = async () => {\n  const res = await fetch(`https://dev69061.service-now.com/api/now/table/x_682526_page_bu_0_cwig_page_builder`, {\n    method: 'get',\n    headers: {\n      'Authorization': 'Basic ' + btoa(`${username}:${psd}`)\n    }\n  });\n  const articles = await res.json();\n  const ids = articles.result.map(article => article.sys_id);\n  const paths = ids.map(id => ({\n    params: {\n      id: id.toString()\n    }\n  }));\n  return {\n    paths,\n    fallback: false\n  };\n};\nexport default article;","map":null,"metadata":{},"sourceType":"module"}