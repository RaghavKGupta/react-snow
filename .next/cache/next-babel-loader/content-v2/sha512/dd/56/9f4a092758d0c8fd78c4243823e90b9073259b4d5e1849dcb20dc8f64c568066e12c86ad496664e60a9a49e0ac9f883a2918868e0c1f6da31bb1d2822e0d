{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/rgupta/Documents/GitHub/react-snow/pages/article/[id]/index.js\";\nimport { username, psd } from '../../../config';\nimport Link from 'next/link';\nimport { useRouter } from 'next/router';\nimport Meta from '../../../components/Meta';\nimport ReactHtmlParser, { processNodes, convertNodeToElement, htmlparser2 } from 'react-html-parser';\nimport Accordion from '../../../components/Accordion';\nimport Card from '../../../components/Card';\n\nconst reactStringReplace = require('react-string-replace');\n\nconst article = ({\n  article\n}) => {\n  let a = article.result.body;\n  let splitText = a.split(/(#.*#)/gm);\n  let b = reactStringReplace(a, '#%accordion%#', (match, i) => /*#__PURE__*/_jsxDEV(Accordion, {\n    accordion: article.result\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 5\n  }, this));\n  let c = reactStringReplace(b, '##%card%##', (match, i) => /*#__PURE__*/_jsxDEV(Card, {\n    card: article.result\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 5\n  }, this));\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: article.result.name_of_page\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      class: \"usa-tag\",\n      children: article.result.sys_updated_on\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), splitText.forEach(element => {\n      if (element.includes('#%accordion%#')) {\n        /*#__PURE__*/\n        _jsxDEV(Accordion, {\n          accordion: article.result\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 9\n        }, this);\n      } else if (element.includes('##%card%##')) {\n        /*#__PURE__*/\n        _jsxDEV(Card, {\n          card: article.result\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 11\n        }, this);\n      } else {\n        ReactHtmlParser(element);\n      }\n    }), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      href: \"/\",\n      children: \"Go Back\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\nexport const getStaticProps = async context => {\n  const res = await fetch(`https://dev69061.service-now.com/api/now/table/x_682526_page_bu_0_cwig_page_builder/${context.params.id}`, {\n    method: 'get',\n    headers: {\n      'Authorization': 'Basic ' + btoa(`${username}:${psd}`)\n    }\n  });\n  const article = await res.json();\n  return {\n    props: {\n      article\n    }\n  };\n};\nexport const getStaticPaths = async () => {\n  const res = await fetch(`https://dev69061.service-now.com/api/now/table/x_682526_page_bu_0_cwig_page_builder`, {\n    method: 'get',\n    headers: {\n      'Authorization': 'Basic ' + btoa(`${username}:${psd}`)\n    }\n  });\n  const articles = await res.json();\n  const ids = articles.result.map(article => article.sys_id);\n  const paths = ids.map(id => ({\n    params: {\n      id: id.toString()\n    }\n  }));\n  return {\n    paths,\n    fallback: false\n  };\n};\nexport default article;","map":{"version":3,"sources":["/Users/rgupta/Documents/GitHub/react-snow/pages/article/[id]/index.js"],"names":["username","psd","Link","useRouter","Meta","ReactHtmlParser","processNodes","convertNodeToElement","htmlparser2","Accordion","Card","reactStringReplace","require","article","a","result","body","splitText","split","b","match","i","c","name_of_page","sys_updated_on","forEach","element","includes","getStaticProps","context","res","fetch","params","id","method","headers","btoa","json","props","getStaticPaths","articles","ids","map","sys_id","paths","toString","fallback"],"mappings":"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","sourcesContent":["import { username, psd } from '../../../config'\nimport Link from 'next/link'\nimport { useRouter } from 'next/router'\nimport Meta from '../../../components/Meta'\nimport ReactHtmlParser, { processNodes, convertNodeToElement, htmlparser2 } from 'react-html-parser';\nimport Accordion from '../../../components/Accordion';\nimport Card from '../../../components/Card';\nconst reactStringReplace = require('react-string-replace');\n\nconst article = ({ article }) => {\n  let a = article.result.body\n  let splitText = a.split(/(#.*#)/gm)\n  let b = (reactStringReplace(a, '#%accordion%#', (match, i) => (\n    <Accordion accordion={article.result}></Accordion>\n)))\n  let c = (reactStringReplace(b, '##%card%##', (match, i) => (\n    <Card card={article.result}></Card>\n))) \n\n  return (\n    <>\n      <h1>{article.result.name_of_page}</h1>\n      <span class=\"usa-tag\">{article.result.sys_updated_on}</span>\n     \n      {splitText.forEach(element => {\n      if(element.includes('#%accordion%#')){\n        <Accordion accordion={article.result}></Accordion>\n        } else if (element.includes('##%card%##')){\n          <Card card={article.result}></Card>\n        } else {\n          ReactHtmlParser(element)\n        }\n      })}\n      \n      <br />\n      <Link href='/'>Go Back</Link>\n    </>\n  )\n}\n\nexport const getStaticProps = async (context) => {\n  const res = await fetch(`https://dev69061.service-now.com/api/now/table/x_682526_page_bu_0_cwig_page_builder/${context.params.id}`, {\n    method: 'get',\n    headers: {\n      'Authorization': 'Basic ' + btoa(`${username}:${psd}`)\n      }\n  })\n\n  const article = await res.json()\n\n  return {\n    props: {\n      article,\n    },\n  }\n}\n\nexport const getStaticPaths = async () => {\n  const res = await fetch(`https://dev69061.service-now.com/api/now/table/x_682526_page_bu_0_cwig_page_builder`, {\n    method: 'get',\n    headers: {\n      'Authorization': 'Basic ' + btoa(`${username}:${psd}`)\n      }\n  })\n\n  const articles = await res.json()\n\n  const ids = articles.result.map((article) => article.sys_id)\n  const paths = ids.map((id) => ({ params: { id: id.toString() } }))\n\n  return {\n    paths,\n    fallback: false,\n  }\n}\n\nexport default article\n"]},"metadata":{},"sourceType":"module"}